#ifndef LAC_H_INCLUDED
#define LAC_H_INCLUDED

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/file.h>
#include <linux/mman.h>
#include <linux/binfmts.h>
#include <linux/version.h>
#include <linux/utsname.h>
#include <linux/kallsyms.h>
#include <linux/dcache.h>
#include <linux/fs.h>
#include <linux/jiffies.h>
#include <linux/sysctl.h>
#include <linux/err.h>
#include <linux/namei.h>
#include <linux/fs_struct.h>
#include <linux/mount.h>
#include <linux/delay.h>
#include <linux/random.h>
#include <linux/fcntl.h>
#include <linux/proc_fs.h>

#include <linux/in.h>
#include <net/sock.h>
#include <linux/skbuff.h>
#include <linux/delay.h>
#include <linux/inet.h>

#include <asm/uaccess.h>

#include <asm/insn.h>

#ifndef CONFIG_SECURITY
#error "This module requires CONFIG_SECURITY to be enabled"
#endif

//#define ENABLE_MMAP_HOOK

#define MODULE_NAME "NSR_LAC"
#define PKPRE "[" MODULE_NAME "] "
#define MAX_FILE_LEN 256
#define TPE_HARDCODED_PATH_LEN 1024

#define LOG_FLOODTIME 5
#define LOG_FLOODBURST 5

#define OP_JMP_SIZE 5

#define IN_ERR(x) (x < 0)

#define log_verbose(fmt, args...) printk( PKPRE  fmt " (%s:%d)\n", \
                                        ##args, __func__, __LINE__);

#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 28)
#define get_task_uid(task) task->uid
#define get_task_parent(task) task->parent
#else
#define get_task_uid(task) task->cred->uid
#define get_task_parent(task) task->real_parent
#endif

// d_path changed argument types. lame

#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 25)
#define tpe_d_path(file, buf, len) d_path(file->f_dentry, file->f_vfsmnt, buf, len);
#else
#define tpe_d_path(file, buf, len) d_path(&file->f_path, buf, len);
#endif

#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 8, 0)
#define __kuid_val(val) val
#define __kgid_val(val) val
#define KGIDT_INIT(val) val
#endif

#ifndef VM_EXECUTABLE
#define VM_EXECUTABLE VM_EXEC
#endif

#define UID_IS_TRUSTED(uid) \
	((uid == 0 && !tpe_paranoid) || \
	(!tpe_trusted_invert && tpe_trusted_gid && in_group_p(KGIDT_INIT(tpe_trusted_gid)) && !tpe_strict) || \
	(tpe_trusted_invert && !in_group_p(KGIDT_INIT(tpe_trusted_gid))))

struct kernsym {
	void *addr; // orig addr
	void *end_addr;
	unsigned long size;
	char *name;
	bool name_alloc; // whether or not we alloc'd memory for char *name
	u8 orig_start_bytes[OP_JMP_SIZE];
	void *new_addr;
	unsigned long new_size;
	bool found;
	bool hijacked;
	void *run;
};


// ------------------------------------------------------------------------
// send userspace
extern int acl_result;
extern struct socket *out_socket;

#define MY_OUT_PORT 1889
//#define MY_IN_PORT  1788
// -----



int symbol_hijack(struct kernsym *, const char *, unsigned long *);
void symbol_restore(struct kernsym *);

int lac_allow_exec(const struct file *, const char *);
int lac_allow(const char *, const char *);

void hijack_syscalls(void);
void undo_hijack_syscalls(void);

void symbol_info(struct kernsym *);

int find_symbol_address(struct kernsym *, const char *);

int kernfunc_init(void);

void tpe_insn_init(struct insn *, const void *);
void tpe_insn_get_length(struct insn *insn);
int tpe_insn_rip_relative(struct insn *insn);

void *malloc(unsigned long size);
void malloc_free(void *buf);

int config_init(void);
void config_exit(void);

// sysctl entries for configuration
extern int tpe_softmode;
extern int tpe_trusted_gid;
extern int tpe_trusted_invert;
extern int tpe_admin_gid;
extern int tpe_dmz_gid;
extern int tpe_strict;
extern int tpe_check_file;
extern int tpe_group_writable;
extern int tpe_paranoid;
extern char tpe_hardcoded_path[];
extern int tpe_kill;
extern int tpe_log;
extern int tpe_log_max;
extern int tpe_log_floodtime;
extern int tpe_log_floodburst;
extern int tpe_lock;
extern int tpe_lsmod;
extern int tpe_proc_kallsyms;
extern int tpe_ps;
extern int tpe_ps_gid;
extern int tpe_harden_symlink;
extern int tpe_harden_hardlinks;
extern int tpe_restrict_setuid;

#define DEVICE_IOCTL_MAGIC      '1'
 
#define DEVICE_IOCTL_ON         _IO(DEVICE_IOCTL_MAGIC, 0)
#define DEVICE_IOCTL_OFF        _IO(DEVICE_IOCTL_MAGIC, 1)
 
#define DEVICE_IOCTL_READ       _IOR(DEVICE_IOCTL_MAGIC, 2, int)
#define DEVICE_IOCTL_WRITE      _IOW(DEVICE_IOCTL_MAGIC, 3, int)
#define DEVICE_IOCTL_RDWR       _IOWR(DEVICE_IOCTL_MAGIC, 4, int)

#define DEVICE_IOCTL_MAX        5   // 인덱스의 최대 갯수

#endif
